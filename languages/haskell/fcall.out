strict digraph deps {
  node [colorscheme=set312, style=filled];

   subgraph cluster_1 {
     label = "app/Main.hs";
     "showToJSON" [label= "showToJSON", color=1];
     "parseTables" [label= "parseTables", color=1];
     "parseDmnXml" [label= "parseDmnXml", color=1];
     "outputTo" [label= "outputTo", color=1];
     "myOutHandle" [label= "myOutHandle", color=1];
     "main" [label= "main", color=1];
     "crash" [label= "crash", color=1];
   }

   subgraph cluster_2 {
     label = "app/Options.hs";
     "testExtThing" [label= "testExtThing", color=2];
     "parseOptions" [label= "parseOptions", color=2];
     "parseFileFormat" [label= "parseFileFormat", color=2];
     "getSame" [label= "getSame", color=2];
     "fileExtensionMappings" [label= "fileExtensionMappings", color=2];
     "ffmtOption" [label= "ffmtOption", color=2];
     "extensionToFileFormat" [label= "extensionToFileFormat", color=2];
     "detectOutformat" [label= "detectOutformat", color=2];
     "detectInformat" [label= "detectInformat", color=2];
     "detectFormat\'" [label= "detectFormat\'", color=2];
     "detectFormat" [label= "detectFormat", color=2];
     "argOptions" [label= "argOptions", color=2];
   }

   subgraph cluster_3 {
     label = "app/ParseMarkdown.hs";
     "whenLeft" [label= "whenLeft", color=3];
     "parseMarkdown" [label= "parseMarkdown", color=3];
     "orgNameLine" [label= "orgNameLine", color=3];
     "maybeHeaderLines" [label= "maybeHeaderLines", color=3];
     "maybeHeaderLine" [label= "maybeHeaderLine", color=3];
     "irrelevantLine" [label= "irrelevantLine", color=3];
     "headerLine" [label= "headerLine", color=3];
     "grepTable" [label= "grepTable", color=3];
     "grepMarkdown" [label= "grepMarkdown", color=3];
     "getTableLine" [label= "getTableLine", color=3];
     "concatMapM" [label= "concatMapM", color=3];
   }

   subgraph cluster_4 {
     label = "src/DMN/DecisionTable.hs";
     "trimRight" [label= "trimRight", color=4];
     "trimLeft" [label= "trimLeft", color=4];
     "trim" [label= "trim", color=4];
     "sortCol" [label= "sortCol", color=4];
     "sortCell" [label= "sortCell", color=4];
     "reprocessRows" [label= "reprocessRows", color=4];
     "outputOrder" [label= "outputOrder", color=4];
     "mySort" [label= "mySort", color=4];
     "myS" [label= "myS", color=4];
     "mkFs" [label= "mkFs", color=4];
     "mkF" [label= "mkF", color=4];
     "mkDTable" [label= "mkDTable", color=4];
     "matches" [label= "matches", color=4];
     "inferTypes" [label= "inferTypes", color=4];
     "inferType" [label= "inferType", color=4];
     "head0" [label= "head0", color=4];
     "getWantedHeaders" [label= "getWantedHeaders", color=4];
     "getOutputHeaders" [label= "getOutputHeaders", color=4];
     "getInputHeaders" [label= "getInputHeaders", color=4];
     "getCommentHeaders" [label= "getCommentHeaders", color=4];
     "fromVN" [label= "fromVN", color=4];
     "firstNonEQ" [label= "firstNonEQ", color=4];
     "fe2dval" [label= "fe2dval", color=4];
     "fNEval" [label= "fNEval", color=4];
     "fEvals" [label= "fEvals", color=4];
     "fEval" [label= "fEval", color=4];
     "evalTable" [label= "evalTable", color=4];
   }

   subgraph cluster_5 {
     label = "src/DMN/ParseFEEL.hs";
     "skipHorizontalSpace" [label= "skipHorizontalSpace", color=5];
     "parseVarname" [label= "parseVarname", color=5];
     "parseFNumFunction" [label= "parseFNumFunction", color=5];
     "parseFNOp2" [label= "parseFNOp2", color=5];
     "parseFNF3" [label= "parseFNF3", color=5];
     "parseFNF1" [label= "parseFNF1", color=5];
     "parseFNF0" [label= "parseFNF0", color=5];
     "nonEscape" [label= "nonEscape", color=5];
     "escape" [label= "escape", color=5];
   }

   subgraph cluster_6 {
     label = "src/DMN/ParseTable.hs";
     "reviseInOut" [label= "reviseInOut", color=6];
     "pipeSeparator" [label= "pipeSeparator", color=6];
     "parseTypeDecl" [label= "parseTypeDecl", color=6];
     "parseType" [label= "parseType", color=6];
     "parseTail" [label= "parseTail", color=6];
     "parseTable" [label= "parseTable", color=6];
     "parseLabelPre" [label= "parseLabelPre", color=6];
     "parseLabelPost" [label= "parseLabelPost", color=6];
     "parseHitPolicy" [label= "parseHitPolicy", color=6];
     "parseHeaderRow" [label= "parseHeaderRow", color=6];
     "parseDataRows" [label= "parseDataRows", color=6];
     "parseDataRow" [label= "parseDataRow", color=6];
     "parseDThr" [label= "parseDThr", color=6];
     "parseContinuationRows" [label= "parseContinuationRows", color=6];
     "parseContinuationRow" [label= "parseContinuationRow", color=6];
     "parseColHeader" [label= "parseColHeader", color=6];
     "mkHitPolicy_C" [label= "mkHitPolicy_C", color=6];
     "mkHitPolicy_" [label= "mkHitPolicy_", color=6];
     "mkHeaderLabel" [label= "mkHeaderLabel", color=6];
     "mkFEELCol" [label= "mkFEELCol", color=6];
     "mkDataColComment" [label= "mkDataColComment", color=6];
     "mkDataCol" [label= "mkDataCol", color=6];
     "grep_out_dashes" [label= "grep_out_dashes", color=6];
     "getpipeSeparator" [label= "getpipeSeparator", color=6];
     "doTrace" [label= "doTrace", color=6];
     "columnSigs" [label= "columnSigs", color=6];
   }

   subgraph cluster_7 {
     label = "src/DMN/ParsingUtils.hs";
     "skipWhile" [label= "skipWhile", color=7];
     "skipMany1" [label= "skipMany1", color=7];
     "skip" [label= "skip", color=7];
     "parseOnly" [label= "parseOnly", color=7];
     "notInClass" [label= "notInClass", color=7];
     "notChar" [label= "notChar", color=7];
     "many1" [label= "many1", color=7];
     "isHorizontalSpace" [label= "isHorizontalSpace", color=7];
     "inClass" [label= "inClass", color=7];
     "endOfLine" [label= "endOfLine", color=7];
     "endOfInput" [label= "endOfInput", color=7];
     "double" [label= "double", color=7];
     "digit" [label= "digit", color=7];
     "anyChar" [label= "anyChar", color=7];
   }

   subgraph cluster_8 {
     label = "src/DMN/SFeelGrammar.hs";
     "wrapExpr" [label= "wrapExpr", color=8];
     "whiteSpace" [label= "whiteSpace", color=8];
     "unescapedLiteral" [label= "unescapedLiteral", color=8];
     "term" [label= "term", color=8];
     "table" [label= "table", color=8];
     "symbol" [label= "symbol", color=8];
     "subtraction" [label= "subtraction", color=8];
     "stringLiteral" [label= "stringLiteral", color=8];
     "stringEscapeSequence" [label= "stringEscapeSequence", color=8];
     "spaceConsumer" [label= "spaceConsumer", color=8];
     "simpleValue" [label= "simpleValue", color=8];
     "simpleUnaryTests" [label= "simpleUnaryTests", color=8];
     "simplePositiveUnaryTests" [label= "simplePositiveUnaryTests", color=8];
     "simplePositiveUnaryTest" [label= "simplePositiveUnaryTest", color=8];
     "simpleLiteral" [label= "simpleLiteral", color=8];
     "simpleExpressions" [label= "simpleExpressions", color=8];
     "simpleExpression" [label= "simpleExpression", color=8];
     "qualifiedName" [label= "qualifiedName", color=8];
     "openIntervalStart" [label= "openIntervalStart", color=8];
     "openIntervalEnd" [label= "openIntervalEnd", color=8];
     "numericLiteral" [label= "numericLiteral", color=8];
     "nonEscapeChar" [label= "nonEscapeChar", color=8];
     "nameStartChar" [label= "nameStartChar", color=8];
     "nameStart" [label= "nameStart", color=8];
     "namePartChar" [label= "namePartChar", color=8];
     "namePart" [label= "namePart", color=8];
     "name" [label= "name", color=8];
     "multiplication" [label= "multiplication", color=8];
     "listOfText" [label= "listOfText", color=8];
     "isVerticalSpace" [label= "isVerticalSpace", color=8];
     "interval" [label= "interval", color=8];
     "integerLiteral" [label= "integerLiteral", color=8];
     "horizontalSpace" [label= "horizontalSpace", color=8];
     "hexDigit" [label= "hexDigit", color=8];
     "expression" [label= "expression", color=8];
     "exponentiation" [label= "exponentiation", color=8];
     "escapedLiteral" [label= "escapedLiteral", color=8];
     "endpoint" [label= "endpoint", color=8];
     "division" [label= "division", color=8];
     "dateTimeLiteral" [label= "dateTimeLiteral", color=8];
     "comparison" [label= "comparison", color=8];
     "closedIntervalStart" [label= "closedIntervalStart", color=8];
     "closedIntervalEnd" [label= "closedIntervalEnd", color=8];
     "charToText" [label= "charToText", color=8];
     "booleanLiteral" [label= "booleanLiteral", color=8];
     "arithmeticNegation" [label= "arithmeticNegation", color=8];
     "arithmeticExpression" [label= "arithmeticExpression", color=8];
     "additionalNameSymbols" [label= "additionalNameSymbols", color=8];
     "addition" [label= "addition", color=8];
   }

   subgraph cluster_9 {
     label = "src/DMN/Translate/FEELhelpers.hs";
     "wrapArray" [label= "wrapArray", color=9];
     "showFeels" [label= "showFeels", color=9];
     "showFeel" [label= "showFeel", color=9];
     "showFNOp2" [label= "showFNOp2", color=9];
     "showFNLog" [label= "showFNLog", color=9];
     "showFNComp" [label= "showFNComp", color=9];
     "lambdaHeader" [label= "lambdaHeader", color=9];
     "capitalize" [label= "capitalize", color=9];
   }

   subgraph cluster_10 {
     label = "src/DMN/Translate/JS.hs";
     "wrapParen" [label= "wrapParen", color=10];
     "type2js" [label= "type2js", color=10];
     "toJS" [label= "toJS", color=10];
     "showVarname" [label= "showVarname", color=10];
     "returnName" [label= "returnName", color=10];
     "propsName" [label= "propsName", color=10];
     "nonBlankCols" [label= "nonBlankCols", color=10];
     "mkTypeSpec" [label= "mkTypeSpec", color=10];
     "mkReturnSpec" [label= "mkReturnSpec", color=10];
     "mkProps" [label= "mkProps", color=10];
     "mkIf" [label= "mkIf", color=10];
     "mkFunction" [label= "mkFunction", color=10];
     "mkArguments" [label= "mkArguments", color=10];
     "mkArgument" [label= "mkArgument", color=10];
     "mkArgSpec" [label= "mkArgSpec", color=10];
     "input_headers" [label= "input_headers", color=10];
     "fexp2js" [label= "fexp2js", color=10];
     "feel2jsOut" [label= "feel2jsOut", color=10];
     "feel2jsIn" [label= "feel2jsIn", color=10];
     "comment_headers" [label= "comment_headers", color=10];
     "annotationsAsComments" [label= "annotationsAsComments", color=10];
   }

   subgraph cluster_11 {
     label = "src/DMN/Translate/PY.hs";
     "wrapParen" [label= "wrapParen", color=11];
     "wrapArray" [label= "wrapArray", color=11];
     "type2py" [label= "type2py", color=11];
     "toPY" [label= "toPY", color=11];
     "showVarname" [label= "showVarname", color=11];
     "nonBlankCols" [label= "nonBlankCols", color=11];
     "mkIf" [label= "mkIf", color=11];
     "mkFunction" [label= "mkFunction", color=11];
     "mkArguments" [label= "mkArguments", color=11];
     "mkArgument" [label= "mkArgument", color=11];
     "input_headers" [label= "input_headers", color=11];
     "fexp2js" [label= "fexp2js", color=11];
     "feel2pyOut" [label= "feel2pyOut", color=11];
     "feel2pyIn" [label= "feel2pyIn", color=11];
     "comment_headers" [label= "comment_headers", color=11];
     "annotationsAsComments" [label= "annotationsAsComments", color=11];
   }

   subgraph cluster_12 {
     label = "src/DMN/Types.hs";
     "var_name" [label= "var_name", color=12];
     "underscore" [label= "underscore", color=12];
     "datarows" [label= "datarows", color=12];
     "baseType" [label= "baseType", color=12];
   }

   subgraph cluster_13 {
     label = "src/DMN/XML/ParseDMN.hs";
     "xshowAggregation" [label= "xshowAggregation", color=13];
     "xparseHitPolicy" [label= "xparseHitPolicy", color=13];
     "xparseAggregation" [label= "xparseAggregation", color=13];
     "xpHitPolicy" [label= "xpHitPolicy", color=13];
     "xpDMNElem" [label= "xpDMNElem", color=13];
     "xpDMNDIElem" [label= "xpDMNDIElem", color=13];
     "xmlns_dmndi" [label= "xmlns_dmndi", color=13];
     "xmlns_dmn" [label= "xmlns_dmn", color=13];
     "xmlns_di" [label= "xmlns_di", color=13];
     "xmlns_dc" [label= "xmlns_dc", color=13];
     "xmlns_camunda" [label= "xmlns_camunda", color=13];
     "withNS" [label= "withNS", color=13];
     "unnamed" [label= "unnamed", color=13];
     "ungroupHp" [label= "ungroupHp", color=13];
     "showHitPolicy" [label= "showHitPolicy", color=13];
     "showEx3" [label= "showEx3", color=13];
     "runEx2" [label= "runEx2", color=13];
     "runEx1" [label= "runEx1", color=13];
     "pickleConfig" [label= "pickleConfig", color=13];
     "pcklReqInput" [label= "pcklReqInput", color=13];
     "parseDMN" [label= "parseDMN", color=13];
     "makePrisms" [label= "makePrisms", color=13];
     "ignoreContent" [label= "ignoreContent", color=13];
     "groupHp" [label= "groupHp", color=13];
     "getEx2" [label= "getEx2", color=13];
     "getEx1" [label= "getEx1", color=13];
     "exprNr" [label= "exprNr", color=13];
     "ex3" [label= "ex3", color=13];
     "drgNr" [label= "drgNr", color=13];
     "dmnWithId" [label= "dmnWithId", color=13];
     "dmnPickler" [label= "dmnPickler", color=13];
     "dmnNamed\'" [label= "dmnNamed\'", color=13];
     "dmnLabeled" [label= "dmnLabeled", color=13];
   }

   subgraph cluster_1 {
     label = "src/DMN/XML/PickleHelpers.hs";
     "wrapIso" [label= "wrapIso", color=1];
     "pairsIso" [label= "pairsIso", color=1];
     "myHeader" [label= "myHeader", color=1];
     "mkInstances" [label= "mkInstances", color=1];
     "mkInstance" [label= "mkInstance", color=1];
     "isoToPair" [label= "isoToPair", color=1];
   }

   subgraph cluster_2 {
     label = "src/DMN/XML/XmlToDmnmd.hs";
     "outThing" [label= "outThing", color=2];
     "oeExample" [label= "oeExample", color=2];
     "ieExample" [label= "ieExample", color=2];
     "convertType" [label= "convertType", color=2];
     "convertIt" [label= "convertIt", color=2];
     "convertAll" [label= "convertAll", color=2];
     "convdec" [label= "convdec", color=2];
     "convTable" [label= "convTable", color=2];
     "convRule" [label= "convRule", color=2];
     "convOutputHeader" [label= "convOutputHeader", color=2];
     "convOutputEntry" [label= "convOutputEntry", color=2];
     "convInputHeader" [label= "convInputHeader", color=2];
     "convInputEntry" [label= "convInputEntry", color=2];
   }

"" -> "evalTable";
"" -> "getInputHeaders";
"" -> "getOutputHeaders";
"" -> "mkF";
"" -> "parseOptions";
"" -> "trim";
"addition" -> "wrapExpr";
"annotationsAsComments" -> "comment_headers";
"annotationsAsComments" -> "comment_headers";
"argOptions" -> "ffmtOption";
"arithmeticExpression" -> "table";
"arithmeticExpression" -> "term";
"baseType" -> "baseType";
"booleanLiteral" -> "symbol";
"comparison" -> "interval";
"comparison" -> "simplePositiveUnaryTest";
"convInputEntry" -> "mkFs";
"convInputHeader" -> "convertType";
"convOutputEntry" -> "mkFs";
"convOutputHeader" -> "convertType";
"convRule" -> "convInputEntry";
"convRule" -> "convOutputEntry";
"convTable" -> "convInputHeader";
"convTable" -> "convOutputHeader";
"convTable" -> "convRule";
"convTable" -> "name";
"convdec" -> "convTable";
"convertAll" -> "convertIt";
"convertIt" -> "convdec";
"dateTimeLiteral" -> "stringLiteral";
"detectFormat" -> "detectFormat\'";
"detectFormat\'" -> "extensionToFileFormat";
"detectFormat\'" -> "getSame";
"detectInformat" -> "detectFormat";
"detectOutformat" -> "detectFormat";
"division" -> "wrapExpr";
"dmnLabeled" -> "dmnWithId";
"dmnLabeled" -> "name";
"dmnPickler" -> "dmnPickler";
"dmnPickler" -> "ignoreContent";
"dmnPickler" -> "withNS";
"dmnPickler" -> "xpDMNElem";
"dmnWithId" -> "unnamed";
"drgNr" -> "drgNr";
"endpoint" -> "simpleValue";
"escapedLiteral" -> "nonEscapeChar";
"escapedLiteral" -> "stringEscapeSequence";
"evalTable" -> "datarows";
"evalTable" -> "fNEval";
"evalTable" -> "head0";
"evalTable" -> "matches";
"evalTable" -> "outputOrder";
"evalTable" -> "table";
"ex3" -> "dmnLabeled";
"ex3" -> "dmnNamed\'";
"ex3" -> "xmlns_camunda";
"exponentiation" -> "wrapExpr";
"exprNr" -> "exprNr";
"expression" -> "simpleExpression";
"extensionToFileFormat" -> "fileExtensionMappings";
"fEvals" -> "fEval";
"fNEval" -> "fNEval";
"fNEval" -> "fe2dval";
"fNEval" -> "fromVN";
"feel2jsIn" -> "feel2jsIn";
"feel2jsIn" -> "showFNComp";
"feel2jsIn" -> "showFNLog";
"feel2jsIn" -> "showFeel";
"feel2jsIn" -> "wrapParen";
"feel2jsOut" -> "showFeels";
"feel2pyIn" -> "capitalize";
"feel2pyIn" -> "feel2pyIn";
"feel2pyIn" -> "showFNComp";
"feel2pyIn" -> "showFNLog";
"feel2pyIn" -> "wrapParen";
"feel2pyOut" -> "showFeels";
"fexp2js" -> "feel2jsIn";
"fexp2js" -> "showVarname";
"fexp2js" -> "wrapParen";
"fexp2js" -> "feel2pyIn";
"fexp2js" -> "showVarname";
"fexp2js" -> "wrapParen";
"ffmtOption" -> "parseFileFormat";
"getCommentHeaders" -> "getWantedHeaders";
"getInputHeaders" -> "getWantedHeaders";
"getOutputHeaders" -> "getWantedHeaders";
"getTableLine" -> "anyChar";
"getTableLine" -> "endOfLine";
"getpipeSeparator" -> "skipHorizontalSpace";
"grepMarkdown" -> "grepTable";
"grepMarkdown" -> "irrelevantLine";
"grepMarkdown" -> "many1";
"grepTable" -> "getTableLine";
"grepTable" -> "many1";
"grepTable" -> "maybeHeaderLines";
"grep_out_dashes" -> "parseDThr";
"headerLine" -> "anyChar";
"headerLine" -> "endOfLine";
"headerLine" -> "skipHorizontalSpace";
"headerLine" -> "skipMany1";
"hexDigit" -> "charToText";
"hexDigit" -> "inClass";
"horizontalSpace" -> "inClass";
"ieExample" -> "dmnWithId";
"ignoreContent" -> "name";
"inferTypes" -> "inferType";
"integerLiteral" -> "symbol";
"interval" -> "closedIntervalEnd";
"interval" -> "closedIntervalStart";
"interval" -> "endpoint";
"interval" -> "integerLiteral";
"interval" -> "openIntervalEnd";
"interval" -> "openIntervalStart";
"interval" -> "spaceConsumer";
"irrelevantLine" -> "endOfLine";
"irrelevantLine" -> "notChar";
"irrelevantLine" -> "skipWhile";
"isVerticalSpace" -> "inClass";
"main" -> "evalTable";
"main" -> "getInputHeaders";
"main" -> "mkF";
"main" -> "myOutHandle";
"main" -> "outputTo";
"main" -> "parseOptions";
"main" -> "parseTables";
"main" -> "showToJSON";
"main" -> "trim";
"makePrisms" -> "ignoreContent";
"makePrisms" -> "pairsIso";
"makePrisms" -> "pcklReqInput";
"makePrisms" -> "wrapIso";
"makePrisms" -> "xmlns_dmn";
"makePrisms" -> "xpDMNDIElem";
"makePrisms" -> "xpDMNElem";
"makePrisms" -> "xpHitPolicy";
"matches" -> "fEvals";
"maybeHeaderLine" -> "headerLine";
"maybeHeaderLine" -> "irrelevantLine";
"maybeHeaderLine" -> "orgNameLine";
"maybeHeaderLines" -> "maybeHeaderLine";
"mkArgSpec" -> "getInputHeaders";
"mkArgSpec" -> "mkTypeSpec";
"mkArgSpec" -> "propsName";
"mkArgument" -> "type2js";
"mkArgument" -> "var_name";
"mkArgument" -> "var_name";
"mkArguments" -> "input_headers";
"mkArguments" -> "mkArgument";
"mkArguments" -> "input_headers";
"mkArguments" -> "mkArgument";
"mkDTable" -> "getCommentHeaders";
"mkDTable" -> "getInputHeaders";
"mkDTable" -> "getOutputHeaders";
"mkDTable" -> "inferTypes";
"mkDTable" -> "reprocessRows";
"mkDataCol" -> "mkFs";
"mkF" -> "baseType";
"mkF" -> "mkF";
"mkF" -> "parseFNumFunction";
"mkF" -> "parseOnly";
"mkF" -> "trim";
"mkFEELCol" -> "mkDataCol";
"mkFEELCol" -> "mkDataColComment";
"mkFs" -> "mkF";
"mkFs" -> "trim";
"mkFunction" -> "underscore";
"mkFunction" -> "underscore";
"mkIf" -> "annotationsAsComments";
"mkIf" -> "feel2jsOut";
"mkIf" -> "fexp2js";
"mkIf" -> "input_headers";
"mkIf" -> "nonBlankCols";
"mkIf" -> "annotationsAsComments";
"mkIf" -> "feel2pyOut";
"mkIf" -> "fexp2js";
"mkIf" -> "input_headers";
"mkIf" -> "nonBlankCols";
"mkInstances" -> "mkInstance";
"mkProps" -> "propsName";
"mkReturnSpec" -> "getOutputHeaders";
"mkReturnSpec" -> "mkTypeSpec";
"mkReturnSpec" -> "returnName";
"mkTypeSpec" -> "type2js";
"multiplication" -> "wrapExpr";
"myS" -> "firstNonEQ";
"myS" -> "sortCol";
"mySort" -> "myS";
"name" -> "additionalNameSymbols";
"name" -> "namePart";
"name" -> "nameStart";
"namePartChar" -> "inClass";
"namePartChar" -> "nameStartChar";
"nameStartChar" -> "inClass";
"nonEscapeChar" -> "charToText";
"notInClass" -> "inClass";
"numericLiteral" -> "digit";
"numericLiteral" -> "spaceConsumer";
"oeExample" -> "dmnWithId";
"orgNameLine" -> "anyChar";
"orgNameLine" -> "endOfLine";
"orgNameLine" -> "skipHorizontalSpace";
"outThing" -> "dmnLabeled";
"outputOrder" -> "mySort";
"outputTo" -> "crash";
"outputTo" -> "toJS";
"outputTo" -> "toPY";
"parseColHeader" -> "mkHeaderLabel";
"parseColHeader" -> "parseLabelPost";
"parseColHeader" -> "parseLabelPre";
"parseColHeader" -> "parseTypeDecl";
"parseColHeader" -> "parseVarname";
"parseColHeader" -> "skipHorizontalSpace";
"parseContinuationRow" -> "parseTail";
"parseContinuationRow" -> "pipeSeparator";
"parseContinuationRow" -> "skipHorizontalSpace";
"parseContinuationRows" -> "parseContinuationRow";
"parseContinuationRows" -> "parseDThr";
"parseContinuationRows" -> "trim";
"parseDMN" -> "dmnPickler";
"parseDMN" -> "pickleConfig";
"parseDThr" -> "endOfLine";
"parseDThr" -> "skipWhile";
"parseDataRow" -> "digit";
"parseDataRow" -> "doTrace";
"parseDataRow" -> "many1";
"parseDataRow" -> "mkFEELCol";
"parseDataRow" -> "parseContinuationRow";
"parseDataRow" -> "parseDThr";
"parseDataRow" -> "parseTail";
"parseDataRow" -> "pipeSeparator";
"parseDataRow" -> "simpleExpression";
"parseDataRow" -> "trim";
"parseDataRows" -> "endOfInput";
"parseDataRows" -> "parseDThr";
"parseDataRows" -> "parseDataRow";
"parseDmnXml" -> "convertAll";
"parseDmnXml" -> "crash";
"parseDmnXml" -> "parseDMN";
"parseFNF0" -> "double";
"parseFNF0" -> "escape";
"parseFNF0" -> "nonEscape";
"parseFNF1" -> "parseVarname";
"parseFNF3" -> "parseFNF0";
"parseFNF3" -> "parseFNF1";
"parseFNF3" -> "parseFNOp2";
"parseFNF3" -> "parseFNumFunction";
"parseFNF3" -> "skipHorizontalSpace";
"parseFNumFunction" -> "parseFNF0";
"parseFNumFunction" -> "parseFNF1";
"parseFNumFunction" -> "parseFNF3";
"parseHeaderRow" -> "endOfInput";
"parseHeaderRow" -> "endOfLine";
"parseHeaderRow" -> "parseColHeader";
"parseHeaderRow" -> "parseHitPolicy";
"parseHeaderRow" -> "pipeSeparator";
"parseHitPolicy" -> "inClass";
"parseHitPolicy" -> "mkHitPolicy_";
"parseHitPolicy" -> "mkHitPolicy_C";
"parseHitPolicy" -> "skipHorizontalSpace";
"parseMarkdown" -> "concatMapM";
"parseMarkdown" -> "grepMarkdown";
"parseMarkdown" -> "parseOnly";
"parseMarkdown" -> "parseTable";
"parseMarkdown" -> "whenLeft";
"parseOptions" -> "argOptions";
"parseOptions" -> "detectInformat";
"parseOptions" -> "detectOutformat";
"parseTable" -> "columnSigs";
"parseTable" -> "mkDTable";
"parseTable" -> "mkFs";
"parseTable" -> "parseContinuationRows";
"parseTable" -> "parseDataRows";
"parseTable" -> "parseHeaderRow";
"parseTable" -> "reviseInOut";
"parseTables" -> "crash";
"parseTables" -> "parseDmnXml";
"parseTables" -> "parseMarkdown";
"parseTail" -> "endOfLine";
"parseTail" -> "pipeSeparator";
"parseTail" -> "skipHorizontalSpace";
"parseTail" -> "trim";
"parseType" -> "parseType";
"parseTypeDecl" -> "parseType";
"parseTypeDecl" -> "skipHorizontalSpace";
"pcklReqInput" -> "xmlns_dmn";
"pipeSeparator" -> "skipHorizontalSpace";
"propsName" -> "underscore";
"qualifiedName" -> "name";
"reprocessRows" -> "mkF";
"returnName" -> "underscore";
"runEx1" -> "parseDMN";
"runEx2" -> "parseDMN";
"showEx3" -> "ex3";
"showFNComp" -> "showFNComp";
"showFNLog" -> "showFNLog";
"showFeel" -> "capitalize";
"showFeel" -> "lambdaHeader";
"showFeel" -> "showFNComp";
"showFeel" -> "showFNLog";
"showFeel" -> "showFNOp2";
"showFeel" -> "showFeel";
"showFeels" -> "showFeel";
"showFeels" -> "wrapArray";
"showToJSON" -> "getOutputHeaders";
"showToJSON" -> "showFeels";
"showVarname" -> "var_name";
"showVarname" -> "var_name";
"simpleExpression" -> "arithmeticExpression";
"simpleExpression" -> "comparison";
"simpleExpression" -> "term";
"simpleExpressions" -> "simpleExpression";
"simpleLiteral" -> "booleanLiteral";
"simpleLiteral" -> "dateTimeLiteral";
"simpleLiteral" -> "numericLiteral";
"simpleLiteral" -> "stringLiteral";
"simpleLiteral" -> "unescapedLiteral";
"simplePositiveUnaryTest" -> "endpoint";
"simplePositiveUnaryTest" -> "spaceConsumer";
"simplePositiveUnaryTests" -> "simplePositiveUnaryTest";
"simpleUnaryTests" -> "simplePositiveUnaryTests";
"simpleValue" -> "qualifiedName";
"simpleValue" -> "simpleLiteral";
"simpleValue" -> "spaceConsumer";
"skipHorizontalSpace" -> "digit";
"skipHorizontalSpace" -> "endOfInput";
"skipHorizontalSpace" -> "endOfLine";
"skipHorizontalSpace" -> "inClass";
"skipHorizontalSpace" -> "isHorizontalSpace";
"skipHorizontalSpace" -> "many1";
"skipHorizontalSpace" -> "skipWhile";
"sortCol" -> "firstNonEQ";
"sortCol" -> "sortCell";
"stringEscapeSequence" -> "hexDigit";
"stringEscapeSequence" -> "listOfText";
"stringLiteral" -> "escapedLiteral";
"subtraction" -> "wrapExpr";
"symbol" -> "spaceConsumer";
"table" -> "addition";
"table" -> "arithmeticNegation";
"table" -> "division";
"table" -> "exponentiation";
"table" -> "multiplication";
"table" -> "subtraction";
"term" -> "expression";
"term" -> "simpleValue";
"toJS" -> "datarows";
"toJS" -> "getInputHeaders";
"toJS" -> "mkArgSpec";
"toJS" -> "mkArguments";
"toJS" -> "mkFunction";
"toJS" -> "mkIf";
"toJS" -> "mkProps";
"toJS" -> "mkReturnSpec";
"toJS" -> "returnName";
"toPY" -> "datarows";
"toPY" -> "mkArguments";
"toPY" -> "mkFunction";
"toPY" -> "mkIf";
"type2js" -> "type2js";
"type2py" -> "type2py";
"unescapedLiteral" -> "name";
"unnamed" -> "wrapIso";
"var_name" -> "underscore";
"whiteSpace" -> "horizontalSpace";
"whiteSpace" -> "isVerticalSpace";
"withNS" -> "xmlns_dc";
"withNS" -> "xmlns_di";
"withNS" -> "xmlns_dmn";
"withNS" -> "xmlns_dmndi";
"wrapExpr" -> "symbol";
"wrapIso" -> "isoToPair";
"xpDMNDIElem" -> "name";
"xpDMNDIElem" -> "wrapIso";
"xpDMNDIElem" -> "xmlns_dmndi";
"xpDMNElem" -> "name";
"xpDMNElem" -> "wrapIso";
"xpDMNElem" -> "xmlns_dmn";
"xpHitPolicy" -> "groupHp";
"xpHitPolicy" -> "showHitPolicy";
"xpHitPolicy" -> "ungroupHp";
"xpHitPolicy" -> "xparseAggregation";
"xpHitPolicy" -> "xparseHitPolicy";
"xpHitPolicy" -> "xshowAggregation";
}
